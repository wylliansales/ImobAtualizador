/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.Image;
import java.awt.Toolkit;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import static java.lang.Thread.sleep;
import java.net.URL;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author Suporte
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        try {
            UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();

        /* URL url = this.getClass().getResource("/icon.png");  
	Image faviIcon = Toolkit.getDefaultToolkit().getImage(url);  
        this.setIconImage(faviIcon); */
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        getInfo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));

        jButton1.setText("Buscar nova Atualização");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jProgressBar1.setStringPainted(true);

        getInfo.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(getInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(230, 230, 230)
                            .addComponent(jButton1))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(96, 96, 96)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(125, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(getInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jButton1.setEnabled(false);

        new Thread() {
            public void run() {

                String host = "";
                FileReader ff;
                String email = "wylliansales@hotmail.com";
                try {
                    ff = new FileReader(new File("host-update.txt"));
                    BufferedReader ler = new BufferedReader(ff);
                    String linha = null;

                    while ((linha = ler.readLine()) != null) {
                        System.out.println("host_update lido");
                        if (!(linha == null)) {
                            host = linha.substring(5);
                            if(host.isEmpty()){
                                JOptionPane.showMessageDialog(null, "Host vazio, atualização não realizada");
                                dispose();
                                System.exit(0);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "host não encontrado, atualização não realizada");
                            dispose();
                            System.exit(0);
                        }

                    }
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }

                File dir = new File("update");
                if (!dir.exists()) {
                    dir.mkdir();
                }
                //TRECHO DE CÓDIGO FECHA TODAS AS INSTANCIAS DO SISTEMA
                try {
                    jProgressBar1.setValue(2);
                    for (int cont = 2; cont < 30; cont++) {
                        Runtime.getRuntime().exec("taskkill /f /im imob.exe");
                        sleep(17);
                        jProgressBar1.setValue(cont);
                    }
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Reinicia o computador e tente novamente!");
                } catch (InterruptedException ex) {
                    JOptionPane.showMessageDialog(null, "É necessário fecha o qimob");
                }

                //COMEÇA O PROCEDIMENTO DE ATUALIZAÇÃO
                int cont = 0; // ESSE CONTATO É UTILIZADO PARA A BARRA DE PROGRESSO
                try {
                    getInfo.setText("Preparando atuliazação............");
                    jProgressBar1.setValue(16);

                    //ESSE ARQUIVO ESTÁ SENDO CRIADO COM TODAS AS PASTAS LOCALIZADA NO C:
                    //ESSE FILE SERÁ ITERADO LOGO ADIANTE, PESQUISARÁ TODAS AS INSTALAÇÕES
                    File file = new File("C:\\");
                        File files[] = file.listFiles();

                        jProgressBar1.setValue(50);

                        //DOWNALOD DO ARQUIVO TXT QUE TEM OS CLIENTES CRIPTOGRAFADO COM CHAVE "MhlZukWsyijZwhW5oo"
                        Dropbox d = new Dropbox();
                        getInfo.setText("Validando......");
                        try{
                            d.dowloand(dir + "\\0000000000.txt", "/0000000000.txt");
                        } catch(com.dropbox.core.NetworkIOException ex){
                            JOptionPane.showMessageDialog(null, "Falha! Conexão com a internet");
                            dispose();
                            System.exit(0);
                        }

                        jProgressBar1.setValue(52);

                        ConectDB conect = new ConectDB(host, System.getProperty("user.dir")+"/QIMOB.FDB", "SYSDBA", "masterkey");
                        jProgressBar1.setValue(53);
                        //Retorna dados[0]= cnpj; dados[1]= empresa;
                        //String dados[] = null;
                        String[] dados = null;
                        try{
                            dados = ConectDB.getEmpresaCnpj(conect);
                        } catch(java.lang.NullPointerException e){
                            JOptionPane.showMessageDialog(null, "Algum error aconteceu com o host, entre em contato com suporte");
                            System.exit(0);
                        }
                        // Método que verifica se o cliente tem autorização
                        jProgressBar1.setValue(54);

                        String autorizacao = Arquivo.lerTxtVerif(dir + "\\0000000000.txt", dados[0]);
                        conect.disconnect();
                        //Se a atualização estiver liberada para o cliente entra nessa condição
                        if (autorizacao.equalsIgnoreCase("true")) {

                            getInfo.setText("Aguarde esse procedimento pode demorar, baixando atualização.......");
                            //Começa o downlaod do arquivo imob.zip
                            try{
                                d.dowloand(dir + "\\imob.zip", "/imob.zip");
                            } catch(com.dropbox.core.v2.files.DownloadErrorException e){
                                JOptionPane.showMessageDialog(null, "Uma nova atualização ainda não foi disponibilizada, tente mais tarde!");
                                dispose();
                                System.exit(0);
                            }

                            //Descompacta na pasta local
                            Zip.descompactar(dir + "\\imob.zip");
                            Email.enviarEmail(email, "O Cliente: " + dados[1] + " CNPJ: " + dados[0]+  " atualizou o qImob!", "Atualização qImob (SUCESSO)");
                            jProgressBar1.setValue(55);
                            //For para localizar todas as pastas do qimob
                            cont = jProgressBar1.getValue();
                            for (File f : files) {

                                cont += 1;
                                if (f.getName().toLowerCase().startsWith("qimob")) {
                                    File arquivoAntigo = new File(f.getAbsolutePath() + "\\iMob.exe");
                                    //A atização só vai ser realizada para bancos configurados caso contrario não será atualizado

                                    if (!("qimob".equalsIgnoreCase(f.getName()))) {
                                        conect = new ConectDB(host, "c:/" + f.getName() + "/QIMOB.FDB", "SYSDBA", "masterkey");
                                        if (conect.connect()) {
                                            String dados1[] = ConectDB.getEmpresaCnpj(conect);
                                            String autorizacao1 = Arquivo.lerTxtVerif(dir + "\\0000000000.txt", dados[0]);

                                            if (autorizacao1.equalsIgnoreCase("true")) {
                                                if (arquivoAntigo.exists()) {
                                                    arquivoAntigo.delete();
                                                    arquivoAntigo.delete();
                                                    arquivoAntigo.delete();
                                                }

                                                FileInputStream inputstream = new FileInputStream("iMob.exe");
                                                File file2 = new File(f.getAbsolutePath() + "\\iMob.exe");
                                                //Transferêcia da atualização
                                                FileUtils.copyInputStreamToFile(inputstream, file2);
                                                getInfo.setText(f.getAbsolutePath() + " (ATUALIZADO)");
                                            }
                                        } else {
                                            sleep(100);
                                            getInfo.setText(f.getAbsolutePath() + " (NAO ATUALIZADO)");
                                            System.out.println(f.getAbsolutePath() + " nAo foi possível conectar com banco (NAO ATUALIZADO)");
                                        }

                                    }

                                    getInfo.setText("Atualizando..............");
                                }
                            }

                        } else {
                            if (autorizacao.equalsIgnoreCase("false")) {
                                Email.enviarEmail(email, "O Cliente: " + dados[1] + " CNPJ: " + dados[0]+  " atualização bloqueada!", "Atualização qImob (BLOQUEADA)");
                                JOptionPane.showMessageDialog(null, "Sua atualização está bloqueada entre em contato com o suporte");
                                dispose();
                                System.exit(0);
                            } else {
                                Email.enviarEmail(email, "O Cliente: " + dados[1] + " CNPJ: " + dados[0]+  " cadastro não encontrado!", "Atualização qImob (NÃO ENCONTRADO)");
                                JOptionPane.showMessageDialog(null, "Seu cadastro não foi localizado, entre em contato com o suporte!");
                                dispose();
                                System.exit(0);
                            }
                        }

                        for (int i = cont; i <= 100; i++) {
                            sleep(50);
                            jProgressBar1.setValue(i);
                            if (jProgressBar1.getValue() == 100) {
                                getInfo.setText("Finalizando..............");

                                // URL url = this.getClass().getResource("/imagens/icon.png");
                                /*  ImageIcon imagem = new ImageIcon(getClass().getResource("/imagens/iconn.png"));
                                JOptionPane.showMessageDialog(
                                    null,
                                    "qImob_1.0 Atualizado!",
                                    "qImob_1.0", JOptionPane.INFORMATION_MESSAGE,
                                    imagem); */
                                JOptionPane.showMessageDialog(null, "Sistema atualizado!");
                                File f1 = new File(dir.getAbsolutePath() + "0000000000.txt");
                                f1.delete();
                                dispose();
                                System.exit(0);
                            }
                        }
                    } catch (InterruptedException ex) {
                        System.out.println("Erro barra de progresso");
                    } catch (Exception ex) {
                        Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel getInfo;
    private javax.swing.JButton jButton1;
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables
}
